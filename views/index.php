<?php
session_start();
$errors = $_SESSION['errors'] ?? [];
$old = $_SESSION['old'] ?? [];
unset($_SESSION['errors'], $_SESSION['old']);
?>
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Unit Editor</title>
    <link rel="stylesheet" href="/css/style.css">

</head>

<body>
    <nav class="nav">
        <div class="title title-main">
            <h3>Mount and Blade Bannerlord modding tools</h3>
        </div>
    </nav>
    <article class="intro">

        <details class="details" closed>


            <summary class="summary btn"><strong>read introduction
                </strong></summary>
            <div class="instruction">
                <p>Using Bannerlord modding tools is extremely easy:</p>
                <br />

                <p>1) Navigate to the unit you want to edit.</p>

                <br />

                <p>2) Enter your desired values in a skill box (from 0 to 999).</p>
                <br />

                <p>
                    3) To add or replace items, choose a slot appropriate for your desired item's type, double-click it,
                    and select a new item from the dropdown menu. You can then proceed to another slot or edit another unit.
                    Units with multiple items in a single slot have a chance to spawn with different equipment sets.
                    <br>
                    Note: If you're using Firefox, you may need to clear the item slot before choosing a new item.
                    On Chrome, Brave, or Edge, double-clicking the slot should display the list of available options immediately.
                </p>
                <br />

                <p>
                    4) When you're happy with your changes, click the "Submit and Download XML" button.
                </p>
                <br />

                <p>
                    5) This will download an XML file named spnpccharacters.xml to your computer.
                </p>
                <br />

                <p>
                    6) Navigate to \Mount & Blade II Bannerlord\Modules\SandBoxCore\ModuleData, and replace the existing spnpccharacters.xml file with the one generated by this app.
                    Tip: Back up your original file so you can revert your changes if needed.
                </p>
                <br />
                <br />
            </div>
            <div class="instruction">
                <h3 class="infoTitle">Things to know:</h3>
                <br />
                <p>
                    - The generated file is fully compatible with the original vanilla version of Bannerlord.
                    <br />
                    - It has not been tested with mods that heavily modify original game files.
                    <br />
                    - Item0, Item1, Item2, and Item3 are slots for weapons, arrows, bolts, and shields.
                    <br />
                    - All other slots have self-explanatory names.
                </p>
            </div>
            <br />

        </details>
    </article>



    <?php foreach ($optionCache as $category => $options): ?>
        <datalist id="<?= htmlspecialchars($category) ?>_options">
            <?php foreach ($options as $option): ?>
                <!-- removing "Item." prefix to make it more user friendly and easier on the eyes -->
                <option value="<?= htmlspecialchars(preg_replace('/^Item\./', '', $option)) ?>"></option>
            <?php endforeach; ?>
        </datalist>
    <?php endforeach; ?>


    <?php if (!empty($errors)): ?>
        <div class="form-errors">
            <ul>
                <h3>There are some errors in your form submission!</h3>
                <?php foreach ($errors as $key => $message): ?>
                    <li><?= htmlspecialchars($message) ?></li>
                <?php endforeach; ?>
            </ul>
        </div>
    <?php endif; ?>
    <form class="form" method="POST" action="/update-units" onsubmit="preparePayload(event)">
        <button class="btn btn-hipster" type="submit">Submit changes and download XML</button>
        <input type="hidden" name="payload" id="payload">
        <?php foreach ($unitsByCulture as $culture => $cultureUnits): ?>
            <div class="culture" id="culture-<?= htmlspecialchars($culture) ?>">
                <details class="details" closed>

                    <summary class="summary btn"><strong>
                            <?= ucfirst($culture) ?></strong> (<?= count($cultureUnits) ?> units)</summary>
                    <div class="cultureX">



                        <?php foreach ($cultureUnits as $unit): ?>
                            <div class="unitCard">




                                <h4 class="unitId"><?= htmlspecialchars($unit->id) ?></h4>

                                <div class="titleUnderscore"></div>
                                <div class="unitCardInputs">

                                    <?php require __DIR__ . '/partials/skillInputs.php'; ?>


                                    <?php require __DIR__ . '/partials/equipmentInputs.php'; ?>


                                </div>
                            </div>
                        <?php endforeach; ?>

                    </div>
                </details>
            </div>
        <?php endforeach; ?>




    </form>
    <footer>
        <p>source code:</p>
        <a href="https://github.com/DavidArabuli/BannerlordModdingAppPHP">github</a>
    </footer>

    <script>
        function preparePayload(event) {
            event.preventDefault();
            const payload = {};

            document.querySelectorAll('.skill-input').forEach(input => {
                const unitId = input.dataset.unitId;
                const skillId = input.dataset.skillId;
                const value = input.value;

                if (!payload[unitId]) payload[unitId] = {
                    skills: {},
                    equipment: {}
                };
                payload[unitId].skills[skillId] = value;
            });

            document.querySelectorAll('.equipment-input').forEach(input => {
                const unitId = input.dataset.unitId;
                const slot = input.dataset.slot;
                const index = input.dataset.index;
                // this converts user friendly format into one that is used by game XML
                const rawValue = input.value.trim();
                const fullValue = rawValue ? `Item.${rawValue.replace(/^Item\./, '')}` : '';

                if (!payload[unitId]) payload[unitId] = {
                    skills: {},
                    equipment: {}
                };
                if (!payload[unitId].equipment[slot]) payload[unitId].equipment[slot] = [];

                payload[unitId].equipment[slot][index] = fullValue;
            });

            document.getElementById('payload').value = JSON.stringify(payload);
            event.target.submit();
        }
    </script>
    <script>
        document.querySelector('form').addEventListener('click', (event) => {
            if (event.target.classList.contains('clear-btn')) {
                const input = event.target.previousElementSibling;
                if (input && input.tagName.toLowerCase() === 'input') {
                    input.value = '';
                    input.dataset.cleared = 'true';
                    input.focus();
                }
            }
        });
    </script>
    <script>
        document.querySelectorAll('.equipment-input').forEach(input => {
            const datalistId = input.getAttribute('list');
            const list = document.getElementById(datalistId);
            const options = Array.from(list.options);
            const original = input.dataset.original;


            input.addEventListener('blur', () => {
                if (input.dataset.cleared === 'true') {
                    delete input.dataset.cleared;
                    return;
                }

                const isValid = options.some(option => option.value === input.value);
                if (!isValid) {
                    input.value = original;
                }
            });


            input.addEventListener('mousedown', (e) => {
                if (document.activeElement === input) {
                    e.preventDefault();


                    const val = input.value;
                    input.value = '';
                    setTimeout(() => {
                        input.value = val;
                    }, 1);
                } else {

                    input.focus();
                }



            });
        });
    </script>



</body>

</html>